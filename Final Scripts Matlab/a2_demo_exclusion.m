%% load orginal table add demo an save as full_tab_a2
% load light version of table without baseline correction generated in
% a1_preprocessing
% Ouput: table with age,gender, Ki,LI and exclusion critera applied
% final sample size: 1594

%% local or cloud

% if script run individual then uncommented next two lines!
%local  = '\\psyger-stor02.d.uzh.ch\';
%s_cloud = 0;


if s_cloud
    prefix = '/mnt/methlab-drive/'; % ubuntu
    prefix = fullfile('\\130.60.169.45\') % windows
else
    prefix = local;
end

%% save path and load data 
% creates path to save final table of this script
data_path = fullfile(prefix, 'methlab\Students\Oliver\script\nobase_corr\Mat_Files');

%path of full_tap generated by a1_preprocessing
file_path = fullfile(prefix, 'methlab\Students\Oliver\script\nobase_corr\raw\full_tab.mat');
load(file_path);


%% rename var
full_tab.Properties.VariableNames([1]) = {'ID'};
full_tab.Properties.VariableNames([2]) = {'SeqL'};
full_tab.Properties.VariableNames([3]) = {'StimulusNr'};
full_tab.Properties.VariableNames([4]) = {'BlockNr'};
full_tab.Properties.VariableNames([5]) = {'data'};
full_tab.Properties.VariableNames([6]) = {'rating'};
full_tab.Properties.VariableNames([7]) = {'Sequence'};
full_tab.Properties.VariableNames([8]) = {'Answers'};
full_tab.Properties.VariableNames([9]) = {'Category'};
full_tab.Properties.VariableNames([10]) = {'Distance'};
full_tab.Properties.VariableNames([11]) = {'correct'};
%% data mean 7 electrodes

for i = 1 :size(full_tab,1)
    full_tab.data{i} = mean(full_tab.data{i},1);
end


%% add hbn demo
bd = readtable(fullfile(prefix, 'methlab_data\HBN\BD.csv'));

%% find id in hbn_dia(bd)

idx = unique(full_tab.ID);

%create col in table for IDs not in BD (for later exclusion) 
idx(:,2) = {1};
for i = 1: size(idx,1)
    
    % find id in BD
    id_BD = string(bd.EID) == idx{i,1};
    
    % find id in full_tab 
    i_tab = string(full_tab.ID) == idx{i,1};
    
    %not in BD? 
    if isempty(find(id_BD))
        idx(i,2) = {NaN};
        full_tab.no_bd(i_tab) = 1;
        continue
    end
    
    full_tab.age(i_tab) = bd.Age(id_BD);
    full_tab.gender(i_tab) = bd.Physical_Sex(id_BD);
 
end

%% age groups
full_tab.agegroup(:) = NaN;
counter = 1;
for x = 5:2:15
    i = full_tab.age > x & full_tab.age <= x + 2;
    full_tab.agegroup(i) = counter;
    counter = counter + 1; 

end

full_tab.agegroup(full_tab.age > 17) = counter; %last group larger because not as many subjects
%% categories
full_tab.Category = ordinal(full_tab.Category);
% 1 = NL, 2 = UN, 3 = K, 4 = F
getlabels(full_tab.Category)
full_tab.Category = setlabels(full_tab.Category ,{'NL', 'UN', 'K', 'F'});
full_tab.Category = categorical(full_tab.Category);



%% mbaseline
for i = 1 :size(full_tab,1)
    %100ms = sample: 51
    full_tab.mbase(i) = mean(full_tab.data{i}(1:51));
end
    


%% index subs with low trials

load(fullfile(prefix, "methlab\Students\Oliver\script\base_corr\raw\reject.mat"));

% 11 coloums are empty (no names): delete these coloums. 
%reject: 2203 -> 2192
keep = any(~cellfun('isempty',reject), 1);
reject = reject(:,keep);


% how many have 0 good trials: 111
z = [reject{2,:}] == 0;
length(find(z));

% add to reject.mat a new row with percentage of trials artifact free
% add a fifth row with index if to reject or not (< 0.5)
for i = 1:size(reject,2)

    %percent of trials
    pT = reject{2,i}/reject{3,i};
    reject(4,i) = {pT};

    %if pT under certain value exclude 
    if pT < 0.50
        reject(5,i) = {1};
    else
        reject(5,i) = {0};
    end
end

% less than 0.75 = 1003 subjects 
% less than 0.5 =  350 
length(find([reject{5,:}] == 1))

% 132 have all good trials
length(find([reject{4,:}] == 1))


% add reject index to full_tab for deletion
% all with reject(5,:) = 1 will be rejected
full_tab.reject(:) = 0;
rej = find([reject{5,:}] == 1); %creates array with index in reject.mat for all to be exlcuded

for i =1: size(rej,2)
    id = reject{1,rej(i)};
    idx_tab = id == string(full_tab.ID);

    %is not in full_tab?
    if isempty(find(idx_tab))
        reject(6,rej(i)) = {NaN};
        continue
    end

    full_tab.reject(idx_tab) = 1; %index in full_tab
    reject{7, rej(i)} = full_tab.age(find(idx_tab,1)); % add age to reject file for inspection

end

%age distribution of reject: subjects with age = 0 are not in excel file. 
%idx = logical([reject{5,:}]);
%hist([reject{7,idx}])

%90 subjects have age 0 same as no bd
%length(unique(full_tab.ID(full_tab.age==0))) 
%length(unique(full_tab.ID(logical(full_tab.no_bd))))

%how many rejected in full_tab: 239 
%[~, idx] = unique(full_tab.ID,"first");
%length(find(full_tab.reject(idx)));
%% exclude 

%% wie viele Subs
length(unique(full_tab.ID))

%% exclude bad eeg
i = ismember(full_tab.rating, 'bip');
full_tab(i,:) = [];
length(unique(full_tab.ID))

%% exclude reject
i  = full_tab.reject == 1;
full_tab(i,:) = [];
length(unique(full_tab.ID))

%% exclude no demo
i = full_tab.no_bd == 1;
full_tab(i,:) = [];
length(unique(full_tab.ID))

% 17 are in BD but have age = nan 
i = isnan(full_tab.age);
length(unique(full_tab.ID(i)))
full_tab(i,:) = [];

length(unique(full_tab.ID)) 
%% exclude subjects with sequence length 7 but older than 10 years 

i = full_tab.SeqL == 7 & full_tab.age>10;
length(unique(full_tab.ID(i)));
full_tab(i,:) = [];


%% delete index 

full_tab = removevars(full_tab, {'reject','no_bd'});

%final sample size: 1594
length(unique(full_tab.ID)) 


%% after exclusion: KI and LI because artifact free

% KI 
% KI weighted
% LI

full_tab.KI_weight(:) = NaN;
full_tab.KI(:) = NaN;
full_tab.LI(:) = NaN;
%get unique name
id = unique(full_tab.ID);

for i = 1:size(id,1)
    %idx for sub i
    idx_sub = find(id(i) == string(full_tab.ID));
   
    %which blocks for subj i 
    unique_block = unique(full_tab.BlockNr(idx_sub));
    
    %get block idx for sub
    for ii = 1:size(unique_block)
        idx_subj_block  = idx_sub(find(full_tab.BlockNr(idx_sub) == unique_block(ii)));
        
        %KI ohne weight
     
        seql = length(find(idx_subj_block));
        cor = length(find(full_tab.correct(idx_subj_block)));

        ki = cor/seql;
        full_tab.KI(idx_subj_block(end)) = ki;
        
        %(computed based on: 1 = NL, 2 = UN, 3 = K, 4 = F)
        k = length(find(full_tab.Category(idx_subj_block) == "K"));
        nl = length(find(full_tab.Category(idx_subj_block) == "NL"));
        
        %ki_weight
        full_tab.KI_weight(idx_subj_block(end)) = (k + 0.5*nl)/seql;
        %li
        full_tab.LI(idx_subj_block(end)) = nl/seql;
    end
end

%% save table 
cd(data_path)
save full_tab_a2.mat full_tab  
%save no_bd_data.mat idx
%save rejected_a2.mat reject 
